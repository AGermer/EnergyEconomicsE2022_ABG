Coding to do:
	- Implement sparse broadcasting methods.
	- Re-write global index methods to escape dimensionality issue (in particular the unstack/stack methods that are currently used for A-blocks)
		* After initial compilation steps, define a global, linear index for variables and one for constraints.
		* Use the linear index to create sparse dataframes, e.g. by the scipy.sparse.coo_matrix method:
		row  = np.array([0, 3, 1, 0]) 
		col  = np.array([0, 3, 1, 2])
		data = np.array([4, 5, 7, 9]) 
		coo_matrix((data, (row, col)), shape=(4, 4)).toarray()
		array([ [4, 0, 9, 0],
				[0, 7, 0, 0],
				[0, 0, 0, 0],
				[0, 0, 0, 5]])
		* Remember to use sparse methods when finally stacking arrays and returning the results.
	- Add new interpreter in compilation of A-blocks when matching with constraint indices (something a bit more GAMS-ish that looks like interpretation of symbolic equations)
	